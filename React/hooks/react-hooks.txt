React Hooks的主要周期函数

useState //保存组件状态


useEffect //处理副作用

useContext 1、createContext()创建组件 组件中包含 子组件 如hooks.js 1行 //减少组件层级传递数据的问题
2. 共享状态 数据 共享状态钩子

useReducer // 返回dispatch 和 state
import React, {useReducer} from 'react'

const initialState = {
    count: 0
}

function reducer(state: {count: number}, action: {type: string, payload: number}) {
    switch (action.type) {
        case 'increment':
            return {count: state.count + action.payload}
        case "decrement":
            return { count: state.count - action.payload };
        default:
            throw new Error();
    }
}

export default () => {
    const [state, dispatch] = useReducer(reducer, initialState)

    return (
        <>
            Count: {state.count}
            <button onClick={() => dispatch({type: 'increment', payload: 3})}> + </button>
            <button onClick={() => dispatch({type: 'decrement', payload: 3})}> - </button>
        </>
    )
}

componentDidMount

useEffect(()=>{
    // do something
},[])


componentDidUpdate shouldComponentUpdate

useEffect(()=>{
    // do something
}, [value])


componentWillUnmount

useEffect(()=>{
    return ()=> {
        // do something
    }
},[])


getDerivedStateFromProps:官方教程

function ScrollView({row}) {
  let [isScrollingDown, setIsScrollingDown] = useState(false);
  let [prevRow, setPrevRow] = useState(null);

  if (row !== prevRow) {
    // Row 自上次渲染以来发生过改变。更新 isScrollingDown。
    setIsScrollingDown(prevRow !== null && row > prevRow);
    setPrevRow(row);
  }

  return `Scrolling down: ${isScrollingDown}`;
}


shouldComponentUpdate

可以使用useMemo，如果不涉及比较组件内部state，建议使用memo
function Parent({ a, b }) {
  // Only re-rendered if `a` changes:
  const child1 = useMemo(() => <Child1 a={a} />, [a]);
  // Only re-rendered if `b` changes:
  const child2 = useMemo(() => <Child2 b={b} />, [b]);
  return (
    <>
      {child1}
      {child2}
    </>
  )
}


Hook API
useState  在函数组件中维护自己的状态
useEffect 在函数组件中实现生命周期钩子函数 语法：useEffect(fn,Array)
useContext  用来处理多层级传递数据的方式，减少组件嵌套 共享状态钩子
useReducer  跟react-redux的使用方式一样，算是提供一个 mini 的 Redux 版本
const [state, dispatch] = useReducer(reducer, initialState);


useCallback 获得一个记忆函数，避免在某些情况下重新渲染子组件，用来做性能优化
useMemo 获得一个记忆组件，和useCallback非常类似，它适用于返回确定的值
主要解决 渲染子组件 提高性能(render 渲染中执行) 
useMemo(() => {}, [...args])
返回值是 函数的返回值

useRef  生成对 DOM 对象的引用，它是一个真正的引用，而不是把值拷过去
useImperativeHandle 透传ref，用于让父组件获取子组件内的引用
useLayoutEffect 同步执行副作用，在页面完全渲染完成后，操作DOM (不经常使用)


useCallback：接收一个内联回调函数参数和一个依赖项数组（子组件依赖父组件的状态，即子组件会使用到父组件的值） ，useCallback 会返回该回调函数的 memoized 版本，该回调函数仅在某个依赖项改变时才会更新

forwardRef 生成对 DOM 对象的引用, 主要是子组件中的DOM