git log --pretty=format:"%h %s" --graph // 查看历史记录
-p	按补丁格式显示每个更新之间的差异。
--stat	显示每次更新的文件修改统计信息。
--shortstat	只显示 --stat 中最后的行数修改添加移除统计。
--name-only	仅在提交信息后显示已修改的文件清单。
--name-status	显示新增、修改、删除的文件清单。
--abbrev-commit	仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
--relative-date	使用较短的相对时间显示（比如，“2 weeks ago”）。
--graph	显示 ASCII 图形表示的分支合并历史。
--pretty	使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和 format（后跟指定格式）。


git init

git clone

git status

git diff
查看已缓存的改动： git diff --cached
查看已缓存的与未缓存的所有改动：git diff HEAD
显示摘要而非整个 diff：git diff --stat

git commit -m '' 写入缓存区
 git config (--global) // 配置

 git reset HEAD 命令用于取消已缓存的内容。


 git rm // 缓存 rm

 git branch -d (branchname) // 删除分支

 git merge (分支) 分支合并

 git branch -d newtest 删除分支

.gitignore
# 忽略所有的 .a 文件
*.a

# 但跟踪所有的 lib.a，即便你在前面忽略了 .a 文件
!lib.a

# 只忽略当前目录下的 TODO 文件，而不忽略 subdir/TODO
/TODO

# 忽略任何目录下名为 build 的文件夹
build/

# 忽略 doc/notes.txt，但不忽略 doc/server/arch.txt
doc/*.txt

# 忽略 doc/ 目录及其所有子目录下的 .pdf 文件
doc/**/*.pdf

创建标签
git tag -a v1.4 -m "my version 1.4"
git tag

忽略文件权限
git config core.filemode false

基本配置操作
查看git全局配置:
git config --global -l				#不加global查看本项目配置

git中可以加入忽略文件权限的配置，具体如下：
git config core.filemode false                    // 当前版本库
git config --global core.fileMode false       // 所有版本库

这样就设置了忽略文件权限。查看下配置：

cat .git/config        // 查看git的配置文件

忽略空格修改：
git config --global apply.whitespace nowarn  //忽略文件中的空格修改

设置git commit编辑器为vim
git config --global core.editor vim //指定编辑器

 git config --global core.pager '' // 该配置项指定 Git 运行诸如 log 和 diff 等命令所使用的分页器。 你可以把它设置成用 more 或者任何你喜欢的分页器（默认用的是 less），当然也可以设置成空字符串，关闭该选项

编辑配置文件
git config --global -e

查看配置文件
git config --global -l

忽略换行符号
git config --global core.whitespace cr-at-eol

忽略filemod:
git config --add core.filemode false


git diff <filename> 查看文件在工作目录与暂存区的差别

git diff --cached <filename>  意义：表示查看已经 add 进暂存区但是尚未 commit 的内容同最新一次 commit 时的内容的差异。 也可以指定仓库版本：


git config --global http.postBuffer 524288000 增加git缓冲区大小

commit之后，想撤销commit

git add . // 添加所有文件
git commit -m "Hello World"

// 撤销commit和add. 不删除工作空间改动代码
git reset --mixed HEAD^

// 撤销commit
git reset --soft HEAD^

// 撤销commit和add. 删除工作空间改动代码
git reset --hard HEAD^

// 如果改commit的注释
git commit --amend
此时会进入默认的vim编辑器，修改注释完毕后保存就ok

du -h .

// clone 指定分支 
git clone -b 分支 地址

// 统一页面显示
git config --global core.pager "less -FRSX"


// :删除分支
git branch -d 

// 修改 git commit 的信息注释
git commit --amend

// 强制拉取远程分支 小心使用
git pull origin main --allow-unrelated-histories

// 查看已经 add 的修改
git diff --cached 
// 查看历史提交
git log --pretty=format:"%h %s" --graph

// 远程仓库的重命名与移除
git remote rename pb paul
git remote remove paul

创建 | CREATE

$ git clone ssh://user@domain.com/xx.git 克隆远程仓库
$ git init 初始化本地 git 仓库（新建仓库）

本地更改 | LOCAL CHANGES

$ git status 查看当前版本状态（是否修改）
$ git diff 显示所有未添加至 index 的变更
$ git diff HEAD 查看已缓存的与未缓存的所有改动
$ git add <path> 将该文件添加到缓存
$ git commit -m ‘xxx’ 提交
$ git commit --amend -m ‘xxx’ 合并上一次提交（用于反复修改）
$ git commit -am ‘xxx’ 将 add 和 commit 合为一步

提交历史记录 | COMMIT HISTORY

$ git log 显示日志
$ git show <commit> 显示某个提交的详细内容
$ git blame <file> 在每一行显示 commit 号,提交者,最早提交日期

分支机构和标签 | BRANCHES & TAGS

$ git branch 显示本地分支
$ git checkout <branch> 切换分支
$ git branch <new-branch> 新建分支
$ git branch --track <new> <remote> 创建新分支跟踪远程分支
$ git branch -d <branch> 删除本地分支
$ git tag <tag-name> 给当前分支打标签

更新和发布 | UPDATE & PUBLISH

$ git remote -v 列出远程分支详细信息
$ git remote show <remote> 显示某个分支信息
$ git remote add <remote> <url> 添加一个新的远程仓库
$ git fetch <remote> 获取远程分支，但不更新本地分支，另需 merge
$ git pull <remote> <branch> 获取远程分支，并更新本地分支
$ git push <remote> <branch> 推送本地更新到远程分支
$ git push <remote> --delete <branch> 删除一个远程分支
$ git push --tags 推送本地标签

合并与衍合 | MERGE & REBASE

$ git merge <branch> 合并分支到当前分支，存在两个
$ git rebase <branch> 合并分支到当前分支，存在一个
$ git rebase --abort 回到执行 rebase 之前
$ git rebase --continue 解决矛盾后继续执行 rebase
$ git mergetool 使用 mergetool 解决冲突
$ git add <resolve-file> 使用冲突文件解决冲突
$ git rm <resolved-file>

撤消 | UNDO

$ git reset --hard HEAD 将当前版本重置为 HEAD（用于 merge 失败）
$ git reset --hard <commit> 将当前版本重置至某一个提交状态(慎用!)
$ git reset <commit> 将当前版本重置至某一个提交状态，代码不变
$ git reset --merge <commit> 重置至某一状态,保留版本库中不同的文件
$ git reset --keep <commit> 重置至某一状态,重置变化的文件,代码改变
$ git checkout HEAD <file> 丢弃本地更改信息并将其存入特定文件
$ git revert <commit> 撤消提交

帮助 | HELP帮助 | HELP
$ git help <command>  获取命令行上的帮助

git show 显示当前HEAD上的最近一次的提交 git log -n1 -p 一样
git commit --amend --only -m 'xxxxxxx'  修改commit -m 信息内容
git clone --recursive git://github.com/foo/bar.git 克隆所有子模块

```shell
git push <远程主机名> <本地分支名>:<远程分支名>
```

```shell
git push origin --delete master //删除线上分支
```

git reset --soft HEAD^

~/.gitconfig
[alias]  
    a = add  
    amend = commit --amend  
    c = commit  
    ca = commit --amend  
    ci = commit -a  
    co = checkout  
    d = diff  
    dc = diff --changed  
    ds = diff --staged  
    f = fetch  
    loll = log --graph --decorate --pretty=oneline --abbrev-commit  
    m = merge  
    one = log --pretty=oneline  
    outstanding = rebase -i @{u}  
    s = status  
    unpushed = log @{u}  
    wc = whatchanged  
    wip = rebase -i @{u}  
    zap = fetch -p