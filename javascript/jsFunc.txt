7. 防抖 & 节流
防抖和节流属于高阶技巧，业务中比较多见的场合也就是搜索内容改变提示信息。即使不加也也不一定能看出区别，但是加了新手维护代码可能会崇拜你哦。

防抖

function debounce(func, wait) {
    let timeout;
    return function () {
        let context = this;
        let args = arguments;

        if (timeout) clearTimeout(timeout);
    
        timeout = setTimeout(() => {
            func.apply(context, args)
        }, wait);
    }
}


节流

function throttle(func, wait) {
    let previous = 0;
    return function() {
        let now = Date.now();
        let context = this;
        let args = arguments;
        if (now - previous > wait) {
            func.apply(context, args);
            previous = now;
        }
    }
}

9.判断小数是否相等
function epsEqu(x,y) {
  return Math.abs(x - y) < Math.pow(2, -52);
}
// 举例
0.1 + 0.2 === 0.3 // false
epsEqu(0.1 + 0.2, 0.3) // true

function epsEqu(x,y) {
  return Math.abs(x - y) < Number.EPSILON;
}


JavaScript深入之new的模拟实现

function objectFactory() {

    var obj = new Object(),//从Object.prototype上克隆一个对象
    
    Constructor = [].shift.call(arguments);//取得外部传入的构造器
    
    var F=function(){};
    F.prototype= Constructor.prototype;
    obj=new F();//指向正确的原型
    
    var ret = Constructor.apply(obj, arguments);//借用外部传入的构造器给obj设置属性
    
    return typeof ret === 'object' ? ret : obj;//确保构造器总是返回一个对象

};

数组方法：
flat(Infinity)扁平化嵌套数组

去重

```JavaScript
function unique (arr) {
  return Array.from(new Set(arr))
}
```

```javascript
function unique(arr){            
        for(var i=0; i<arr.length; i++){
            for(var j=i+1; j<arr.length; j++){
                if(arr[i]==arr[j]){         //第一个等同于第二个，splice方法删除第二个
                    arr.splice(j,1);
                    j--;
                }
            }
        }
return arr;
}
```





```javascript
function unique(arr) {
    if (!Array.isArray(arr)) {
        console.log('type error!')
        return
    }
    var array = [];
    for (var i = 0; i < arr.length; i++) {
        if (array .indexOf(arr[i]) === -1) {
            array .push(arr[i])
        }
    }
    return array;
}
```



```javascript
function unique(arr) {
    if (!Array.isArray(arr)) {
        console.log('type error!')
        return;
    }
    arr = arr.sort()
    var arrry= [arr[0]];
    for (var i = 1; i < arr.length; i++) {
        if (arr[i] !== arr[i-1]) {
            arrry.push(arr[i]);
        }
    }
    return arrry;
}
```





